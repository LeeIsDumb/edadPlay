import streamlit as st
from urllib.request import urlretrieve
import os
from main import analizar_video

# Configuraci√≥n inicial
st.set_page_config(page_title="Clasificador de Edad para V√≠deos", page_icon="üé¨", layout="wide")

# T√≠tulo y descripci√≥n
st.title("üé¨ Clasificador Autom√°tico de Edad Recomendada para V√≠deos")
st.write("""
Analiza v√≠deos para determinar la edad m√≠nima recomendada seg√∫n criterios visuales y sonoros.
Sube tu v√≠deo (m√°x. 50MB) o proporciona un enlace p√∫blico para comenzar el an√°lisis.
""")

# Manejo de v√≠deo subido o URL
video_file = st.file_uploader("Sube un v√≠deo", type=["mp4", "mov", "avi"])
video_url = st.text_input("O introduce la URL p√∫blica del v√≠deo:")

ruta_video = None

if video_file:
    if video_file.size <= 50 * 1024 * 1024:
        ruta_video = f"uploaded_{video_file.name}"
        with open(ruta_video, "wb") as f:
            f.write(video_file.read())
    else:
        st.error("El archivo excede el tama√±o m√°ximo permitido de 50 MB.")
elif video_url:
    try:
        ruta_video = "video_descargado.mp4"
        urlretrieve(video_url, ruta_video)
        st.success("V√≠deo descargado correctamente.")
    except:
        st.error("No se pudo descargar el v√≠deo. Verifica el enlace.")

# Analizar el v√≠deo al tener una ruta v√°lida
if ruta_video and st.button("Analizar v√≠deo"):
    with st.spinner('Analizando v√≠deo, esto puede tardar varios minutos...'):
        edad_recomendada, informe = analizar_video(ruta_video)
    st.success('¬°An√°lisis completado!')

    st.subheader("üìå Edad m√≠nima recomendada:")
    st.markdown(f"### **{edad_recomendada} a√±os**")

    st.subheader("üìë Informe detallado:")
    st.text(informe)

# Informaci√≥n adicional explicativa
st.sidebar.header("üìö Informaci√≥n Adicional")

if st.sidebar.checkbox("Mostrar tablas explicativas"):
    st.sidebar.markdown("""
    ### üî∏ Indicadores - Edad recomendada:
    | Indicador | 0‚Äì3 a√±os | 4‚Äì6 a√±os | 7‚Äì12 a√±os | +13 a√±os |
    |---|---|---|---|---|
    | Cortes/min | <2 | 2-4 | 5-8 | >8 |
    | Complejidad visual | Muy baja | Baja-Mod | Moderada-Alta | Alta |
    | Volumen promedio | <60 dB | 60-70 dB | 70-80 dB | 80-85 dB |
    | Densidad sonora | Muy baja | Moderada | Alta | Muy alta |

    ### üî∏ Comparativa edad ‚Äì recomendaciones:
    | Edad | Recomendaciones uso pantallas | Posibles efectos negativos |
    |------|-------------------------------|----------------------------|
    | 0-3 | Evitar o m√≠nimamente pantallas; ritmo lento y supervisado | Retrasos lenguaje, atenci√≥n; irritabilidad |
    | 4-6 | Max 1h/d√≠a; contenidos lentos/educativos supervisados | Dificultad atenci√≥n; impulsividad |
    | 7-12 | Uso equilibrado supervisado; alternar actividades offline | Problemas atenci√≥n; agresividad; ansiedad |
    | +13 | Autocontrol guiado; contenido adecuado; equilibrado | Estr√©s, trastornos sue√±o; riesgo adicci√≥n |

    """)

    st.sidebar.markdown("""
    ### üî∏ Estudios cient√≠ficos de referencia:
    - [OMS Directrices sobre actividad f√≠sica y pantallas](https://www.who.int/)
    - [AAP Uso medios digitales en ni√±os](https://www.aap.org/)
    - [UNICEF Informe uso pantallas](https://www.unicef.org/)
    """)

# Limpiar archivos temporales tras an√°lisis (opcional para evitar almacenamiento innecesario)
def limpiar_archivos_temporales():
    archivos = ["uploaded_video.mp4", "video_descargado.mp4", "audio_temp.wav"]
    for archivo in archivos:
        if os.path.exists(archivo):
            os.remove(archivo)

limpiar_archivos_temporales()
